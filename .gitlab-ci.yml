stages:
  - create-ssh-key-pair
  - prerequisites-install
  - install-terraform
  - deploy
  - restart-sshd
  - test-ansible
  - ansible-playbooks

  - prometheus-node-exporter-grafana

  - destroy

create-ssh-key-pair:
  stage: create-ssh-key-pair
  script:
    - pwd
    - mkdir -p ~/.ssh
    - |
      #!/bin/bash
      FILE=~/.ssh/id_rsa
      if [ -f "$FILE" ]; then
          echo "$FILE exists."
      else 
          ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa 2>/dev/null <<< y >/dev/null
      fi
    # - sudo echo $PUBLICKEYNEW > ~/.ssh/gitlabnew.pub
    - echo $PUBLICKEYNEW > ~/.ssh/gitlabnew.pub
    - chmod 400 ~/.ssh/gitlabnew.pub

  tags:
    - banuka

prerequisites-install:
  stage: prerequisites-install
  script:
    - echo "hi"
    # - sudo yum update -y && sudo yum install wget unzip -y
    - yum update -y && sudo yum install wget unzip -y
  tags:
    - banuka
    
install_terraform:
  stage: install-terraform
  script:
    - export VER="0.13.0-beta3"
    - wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
    - unzip terraform_${VER}_linux_amd64.zip
    # - sudo mv terraform /usr/local/bin/
    - mv terraform /usr/local/bin/
    - pwd
    - rm -rf terraform_${VER}_linux_amd64.zip
    - which terraform
  tags:
    - banuka

deploy:
  stage: deploy
  script:
    - echo "" > ~/.ssh/known_hosts
    - terraform init
    - terraform plan
    - terraform apply --auto-approve
  tags:
    - banuka

restart-sshd:
  stage: restart-sshd
  script:
    - pwd
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - |
      string="StrictHostKeyChecking no"
      file=/etc/ssh/ssh_config

      grep -qwi "$string$" "$file" && \
      sed -i "s,\(^[^[:alnum:]]*\)\($string$\),\2,i" "$file" || \
      sudo echo "$string" >> "$file"

    - cat /etc/ssh/ssh_config
    - mkdir -p /etc/ansible && touch /etc/ansible/hosts
    - cat /etc/ansible/hosts
    - cd ~/.ssh
    - service sshd restart
    - ls
  tags:
    - banuka

test-ansible:
  stage: test-ansible
  retry:
    max: 2
    when:
      - always
  script:
    - ansible -m ping all
    - ls
  when: delayed
  start_in: 1 minutes
  tags:
    - banuka

ansible-playbooks:
  stage: ansible-playbooks
  retry:
    max: 2
    when:
      - always
  script:
    - echo "ansible"
    # - ansible-playbook ./ansible-playbooks/master_and_minions.yaml
    # - ansible-playbook ./ansible-playbooks/master.yaml
    # - ansible-playbook ./ansible-playbooks/join_master_and_hosts.yaml
  when: delayed
  start_in: 10 seconds
  tags:
    - banuka

install-prometheus:
  stage: prometheus-node-exporter-grafana
  script:
    - echo "Installing Prometheus"
    - ansible-playbook ./ansible-playbooks/install_prometheus.yaml
  tags:
    - banuka    

install-node-exporter:
  stage: prometheus-node-exporter-grafana
  script:
    - ansible-playbook ./ansible-playbooks/install_node_exporter.yaml
  tags:
    - banuka   


install-grafana:
  stage: prometheus-node-exporter-grafana
  script:
    - ansible-playbook ./ansible-playbooks/install_grafana.yaml
  tags:
    - banuka          


# destroy_if_failed:
#   stage: destroy
#   script:
#     - terraform init
#     - terraform destroy --auto-approve
#   when: on_failure
#   tags:
#     - banuka

destroy:
  stage: destroy
  script:
    - terraform init
    - terraform destroy --auto-approve
  when: manual
  tags:
    - banuka