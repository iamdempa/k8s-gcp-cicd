image:
  name: 19950818/banu-terraform-ansible-cicd:v1.3
  

stages:
  - create-ssh-key-pair
  - prerequisites
  - install-terraform
  - deploy
  - restart-sshd
  - test-ansible
  - ansible-playbooks
  - destroy

create-ssh-key-pair:
  stage: create-ssh-key-pair
  script:
    - pwd
    - mkdir -p ~/.ssh

    # key is genereated ONLY for ansible use
    # ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa 2>/dev/null <<< y >/dev/null
    - |
      # !/bin/bash
      FILE=~/.ssh/id_rsa
      if [ -f "$FILE" ]; then
        echo "$FILE exists."
        echo "removing the file and generating a new one"
        cd ~/.ssh
        rm -rf id_rsa id_rsa.pub
        echo -e "\n"| ssh-keygen -t rsa -N ""
      else 
        echo -e "\n"|ssh-keygen -t rsa -N ""      
      fi

    # to log into master node/minions, this key will be picked by terraform and place in each node
    - echo $PUBLICKEYNEW > ~/.ssh/gitlabnew.pub
    - chmod 400 ~/.ssh/gitlabnew.pub
    - cp ~/.ssh/id_rsa.pub ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - ./id_rsa.pub

  tags:
    - gitlab-org

install-dependencies:
  stage: prerequisites
  script:
    - cat id_rsa.pub
    - echo "hi"
    - yum update -y && yum install wget unzip -y
  tags:
    - gitlab-org

install_terraform:
  stage: install-terraform
  script:
    - export VER="0.13.0-beta3"
    - wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
    - unzip terraform_${VER}_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - pwd
    - rm -rf terraform_${VER}_linux_amd64.zip
    - which terraform
  tags:
    - gitlab-org

deploy:
  stage: deploy
  script:
    - |
      # !/bin/bash
      KNOWNHOSTS=~/.ssh/known_hosts
      if [ -f "$KNOWNHOSTS" ]; then
        echo "$KNOWNHOSTS exists."  
        echo "" > ~/.ssh/known_hosts      
      else 
        mkdir -p ~/.ssh && touch ~/.ssh/known_hosts          
      fi
    - |
      #!/bin/bash
      ANSIBLEHOSTS=/etc/ansible/hosts
      if [ -f "$ANSIBLEHOSTS" ]; then
          echo "$ANSIBLEHOSTS exists."
      else 
          mkdir -p /etc/ansible/ && touch /etc/ansible/hosts
      fi
    - cat /etc/ansible/hosts
    - cat /etc/ansible/hosts
    - cp /etc/ansible/hosts ${CI_PROJECT_DIR}    
    - terraform init
    - terraform plan
    - terraform apply --auto-approve
  artifacts:
    paths:
      - ./hosts    
  tags:
    - gitlab-org

restart-sshd:
  stage: restart-sshd
  script:
    - pwd
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - |
      string="StrictHostKeyChecking no"
      file=/etc/ssh/ssh_config

      grep -qwi "$string$" "$file" && \
      sed -i "s,\(^[^[:alnum:]]*\)\($string$\),\2,i" "$file" || \
      echo "$string" >> "$file"

    - cat /etc/ssh/ssh_config
    # - cd ~/.ssh
    # - systemctl restart sshd
    - ls
  tags:
    - gitlab-org

test-ansible:
  stage: test-ansible
  retry:
    max: 2
    when:
      - always
  script:
    - ansible -m ping all
    - ls
  when: delayed
  start_in: 1 minutes
  tags:
    - gitlab-org

ansible-playbooks:
  stage: ansible-playbooks
  retry:
    max: 2
    when:
      - always
  script:
    - echo "ansible"
    - ansible-playbook -i hosts ./ansible-playbooks/master_and_minions.yaml
    - ansible-playbook -i hosts ./ansible-playbooks/master.yaml
    - ansible-playbook -i hosts ./ansible-playbooks/join_master_and_hosts.yaml
  when: delayed
  start_in: 10 seconds
  needs:
    - job: test-ansible
  tags:
    - gitlab-org

destroy-if-failed:
  stage: destroy
  script:
    - terraform init
    - terraform destroy --auto-approve
  when: on_failure
  tags:
    - gitlab-org  

destroy:
  stage: destroy
  script:
    - terraform init
    - terraform destroy --auto-approve
  when: manual
  tags:
    - gitlab-org
