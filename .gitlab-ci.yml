stages:
  - PREREQUISITES
  - BUILD-INFRASTRUCTURE
  - CONFIG-ANSIBLE
  - MONITORING

  - DESTROY

create-ssh-key-pair:
  stage: PREREQUISITES
  script:
    - pwd
    - mkdir -p ~/.ssh
    - |
      #!/bin/bash
      FILE=~/.ssh/id_rsa
      if [ -f "$FILE" ]; then
          echo "$FILE exists."
      else 
          ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa 2>/dev/null <<< y >/dev/null
      fi
    - echo $PUBLICKEYNEW > ~/.ssh/gitlabnew.pub
    - chmod 400 ~/.ssh/gitlabnew.pub

  tags:
    - banuka-gcp

prerequisites-install:
  stage: PREREQUISITES
  dependencies:
    - create-ssh-key-pair
  script:
    - echo "hi"
    # - sudo yum update -y && sudo yum install wget unzip -y
    - yum update --exclude=google-cloud-sdk -y && sudo yum install wget unzip -y
  tags:
    - banuka-gcp

install_terraform:
  stage: PREREQUISITES
  dependencies:
    - prerequisites-install 
  script:
    - export VER="0.13.0-beta3"
    - wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
    - unzip terraform_${VER}_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - pwd
    - rm -rf terraform_${VER}_linux_amd64.zip
    - which terraform
  tags:
    - banuka-gcp

build-gcp:
  stage: BUILD-INFRASTRUCTURE
  script:
    - echo "" > ~/.ssh/known_hosts
    - terraform init
    - terraform plan
    - terraform apply --auto-approve
  tags:
    - banuka-gcp

restart-sshd:
  stage: BUILD-INFRASTRUCTURE
  dependencies:
    - build-gcp
  script:
    - pwd
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - |
      string="StrictHostKeyChecking no"
      file=/etc/ssh/ssh_config

      grep -qwi "$string$" "$file" && \
      sed -i "s,\(^[^[:alnum:]]*\)\($string$\),\2,i" "$file" || \
      sudo echo "$string" >> "$file"

    - cat /etc/ssh/ssh_config
    - mkdir -p /etc/ansible && touch /etc/ansible/hosts
    - cat /etc/ansible/hosts
    - cd ~/.ssh
    - service sshd restart
    - ls
  tags:
    - banuka-gcp

ansible-ping-test:
  stage: CONFIG-ANSIBLE
  retry:
    max: 2
    when:
      - always
  script:
    - ansible -m ping all
    - ls
  when: delayed
  start_in: 55 seconds
  tags:
    - banuka-gcp

ansible-playbooks:
  stage: CONFIG-ANSIBLE
  dependencies:
    - ansible-ping-test
  retry:
    max: 2
    when:
      - always
  script:
    - echo "ansible"
    - ansible-playbook ./ansible-playbooks/kubernetes/master_and_minions.yaml
    - ansible-playbook ./ansible-playbooks/kubernetes/master.yaml
    - ansible-playbook ./ansible-playbooks/kubernetes/join_master_and_hosts.yaml
  when: delayed
  start_in: 1 minutes
  tags:
    - banuka-gcp

install-node-exporter:
  stage: MONITORING
  script:
    - ansible-playbook ./ansible-playbooks/node_exporter/install_node_exporter.yaml
  tags:
    - banuka-gcp

install-prometheus:
  stage: MONITORING
  dependencies:
    - install-node-exporter 
  script:
    - echo "Installing Prometheus"
    - ansible-playbook ./ansible-playbooks/prometheus/install_prometheus.yaml
  tags:
    - banuka-gcp

install-grafana:
  stage: MONITORING
  dependencies:
    - install-prometheus  
  script:
    - ansible-playbook ./ansible-playbooks/grafana/install_grafana.yaml
  tags:
    - banuka-gcp

destroy_if_failed:
  stage: DESTROY
  script:
    - terraform init
    - terraform destroy --auto-approve
  when: on_failure
  tags:
    - banuka-gcp

destroy:
  stage: DESTROY
  script:
    - terraform init
    - terraform destroy --auto-approve
  when: manual
  tags:
    - banuka-gcp
